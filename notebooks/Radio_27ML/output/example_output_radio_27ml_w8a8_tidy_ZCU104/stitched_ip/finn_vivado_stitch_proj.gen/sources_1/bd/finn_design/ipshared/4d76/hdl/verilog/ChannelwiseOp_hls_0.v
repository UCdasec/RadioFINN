// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ChannelwiseOp_hls_0_ChannelwiseOp_hls_0,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.908000,HLS_SYN_LAT=31,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=100,HLS_SYN_LUT=259,HLS_VERSION=2024_1}" *)

module ChannelwiseOp_hls_0 (
        ap_clk,
        ap_rst_n,
        in0_V_TVALID,
        out_V_TREADY,
        in0_V_TDATA,
        in0_V_TREADY,
        out_V_TDATA,
        out_V_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input   in0_V_TVALID;
input   out_V_TREADY;
input  [23:0] in0_V_TDATA;
output   in0_V_TREADY;
output  [23:0] out_V_TDATA;
output   out_V_TVALID;

 reg    ap_rst_n_inv;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] ap_CS_iter2_fsm;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
reg   [1:0] ap_CS_iter3_fsm;
wire    regslice_both_out_V_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_CS_iter3_fsm_state4;
wire   [0:0] icmp_ln295_fu_119_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_loop_exit_ready_delayed;
wire   [4:0] threshs_34_address0;
wire   [7:0] threshs_34_q0;
reg    in0_V_TDATA_blk_n;
reg    out_V_TDATA_blk_n;
wire   [21:0] act_fu_109_p1;
reg   [21:0] act_reg_195;
reg   [21:0] act_reg_195_pp0_iter1_reg;
reg   [0:0] icmp_ln295_reg_200;
reg   [0:0] icmp_ln295_reg_200_pp0_iter1_reg;
reg   [0:0] icmp_ln295_reg_200_pp0_iter2_reg;
wire   [63:0] idxprom2_i_i_fu_133_p1;
reg   [4:0] i1_fu_62;
wire   [4:0] i_fu_113_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i1_load;
reg   [31:0] nf_12_fu_66;
wire   [31:0] nf_2_fu_150_p3;
reg    threshs_34_ce0_local;
wire   [31:0] nf_fu_138_p2;
wire   [0:0] icmp_ln307_fu_144_p2;
wire  signed [22:0] sext_ln253_1_fu_167_p1;
wire  signed [22:0] sext_ln253_fu_163_p1;
wire   [22:0] result_fu_170_p2;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_continue_int;
wire    regslice_both_in0_V_U_apdone_blk;
wire   [23:0] in0_V_TDATA_int_regslice;
wire    in0_V_TVALID_int_regslice;
reg    in0_V_TREADY_int_regslice;
wire    regslice_both_in0_V_U_ack_in;
wire   [23:0] out_V_TDATA_int_regslice;
reg    out_V_TVALID_int_regslice;
wire    out_V_TREADY_int_regslice;
wire    regslice_both_out_V_U_vld_out;
reg    ap_condition_262;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 ap_CS_iter3_fsm = 2'd1;
#0 ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg = 1'b0;
#0 i1_fu_62 = 5'd0;
#0 nf_12_fu_66 = 32'd0;
end

ChannelwiseOp_hls_0_threshs_34_ROM_2P_LUTRAM_1R #(
    .DataWidth( 8 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
threshs_34_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(threshs_34_address0),
    .ce0(threshs_34_ce0_local),
    .q0(threshs_34_q0)
);

ChannelwiseOp_hls_0_flow_control_loop_delay_pipe_no_ap_cont flow_control_loop_delay_pipe_no_ap_cont_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(1'b1),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(1'b0),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(1'b0),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

ChannelwiseOp_hls_0_regslice_both #(
    .DataWidth( 24 ))
regslice_both_in0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_V_TDATA),
    .vld_in(in0_V_TVALID),
    .ack_in(regslice_both_in0_V_U_ack_in),
    .data_out(in0_V_TDATA_int_regslice),
    .vld_out(in0_V_TVALID_int_regslice),
    .ack_out(in0_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_U_apdone_blk)
);

ChannelwiseOp_hls_0_regslice_both #(
    .DataWidth( 24 ))
regslice_both_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_V_TDATA_int_regslice),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(out_V_TREADY_int_regslice),
    .data_out(out_V_TDATA),
    .vld_out(regslice_both_out_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_262)) begin
        i1_fu_62 <= i_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
    nf_12_fu_66 <= 32'd0;
end else if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
    nf_12_fu_66 <= nf_2_fu_150_p3;
end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        act_reg_195 <= act_fu_109_p1;
        icmp_ln295_reg_200 <= icmp_ln295_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        act_reg_195_pp0_iter1_reg <= act_reg_195;
        icmp_ln295_reg_200_pp0_iter1_reg <= icmp_ln295_reg_200;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln295_reg_200_pp0_iter2_reg <= icmp_ln295_reg_200_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (icmp_ln295_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i1_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_62;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state1)) begin
        in0_V_TDATA_blk_n = in0_V_TVALID_int_regslice;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        in0_V_TREADY_int_regslice = 1'b1;
    end else begin
        in0_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter3_fsm_state4) | (1'b1 == ap_CS_iter2_fsm_state3))) begin
        out_V_TDATA_blk_n = out_V_TREADY_int_regslice;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        out_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        threshs_34_ce0_local = 1'b1;
    end else begin
        threshs_34_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~(((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ~((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & ((1'b0 == ap_CS_iter2_fsm_state3) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if ((~((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter3_fsm_state4) & (icmp_ln295_reg_200_pp0_iter2_reg == 1'd1))) begin
                ap_NS_iter3_fsm = ap_ST_iter0_fsm_state1;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign act_fu_109_p1 = in0_V_TDATA_int_regslice[21:0];

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (in0_V_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (out_V_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((regslice_both_out_V_U_apdone_blk == 1'b1) | (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_condition_262 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((out_V_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_113_p2 = (ap_sig_allocacmp_i1_load + 5'd1);

assign icmp_ln295_fu_119_p2 = ((ap_sig_allocacmp_i1_load == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln307_fu_144_p2 = ((nf_fu_138_p2 == 32'd27) ? 1'b1 : 1'b0);

assign idxprom2_i_i_fu_133_p1 = nf_12_fu_66;

assign in0_V_TREADY = regslice_both_in0_V_U_ack_in;

assign nf_2_fu_150_p3 = ((icmp_ln307_fu_144_p2[0:0] == 1'b1) ? 32'd0 : nf_fu_138_p2);

assign nf_fu_138_p2 = (nf_12_fu_66 + 32'd1);

assign out_V_TDATA_int_regslice = result_fu_170_p2;

assign out_V_TVALID = regslice_both_out_V_U_vld_out;

assign result_fu_170_p2 = ($signed(sext_ln253_1_fu_167_p1) + $signed(sext_ln253_fu_163_p1));

assign sext_ln253_1_fu_167_p1 = $signed(act_reg_195_pp0_iter1_reg);

assign sext_ln253_fu_163_p1 = $signed(threshs_34_q0);

assign threshs_34_address0 = idxprom2_i_i_fu_133_p1;

endmodule //ChannelwiseOp_hls_0
